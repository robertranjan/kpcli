version: "3"

vars:
  APPNAME: kpcli
  DATETIMESTAMP: '{{ now | date "2006-01-02" }}'
  GIT_HASH:
    sh: git rev-parse --short HEAD
  COMMIT_COUNT:
    sh: git rev-list HEAD --count
  VERSION: '{{ printf "%s.%s" .GIT_HASH .COMMIT_COUNT }}'

tasks:
  default:
    desc: "show these available tasks"
    cmds:
      - task -l

  cleanup:
    cmd: rm -rf ./tmp

  generate-sample-config:
    aliases:
      - "gen"
    cmds:
      - |
        bin/kpcli gen

  add-entry:
    silent: true
    cmds:
      - |
        t=$(gofakeit word)
        u=$(gofakeit username)
        p=$(gofakeit password)
        echo "    Adding user: '${u}' pass: '${p}' with title: '${t}'"
        bin/kpcli \
          --keyfile ${KDBX_KEYFILE} \
          --database ${KDBX_DATABASE} \
          --pass ${KDBX_PASSWORD} \
          add \
            --entry-title "${t}" \
            --entry-user "${u}" \
            --entry-pass "${p}"

  with-key:
    silent: true
    cmds:
      - task: cleanup
      - |
        bin/kpcli \
          --keyfile ${KDBX_KEYFILE} \
          --database ${KDBX_DATABASE} \
          --pass ${KDBX_PASSWORD} \
          create

        bin/kpcli \
          --keyfile ${KDBX_KEYFILE} \
          --database ${KDBX_DATABASE} \
          --pass ${KDBX_PASSWORD} \
          ls

  without-key:
    silent: true
    cmds:
      - task: cleanup
      - |
        bin/kpcli \
          --database ${KDBX_DATABASE} \
          --pass ${KDBX_PASSWORD} \
          --nokey \
          create

        bin/kpcli \
          --database ${KDBX_DATABASE} \
          --pass ${KDBX_PASSWORD} \
          --nokey \
          ls

  build:
    desc: "build go project"
    dir: "{{ default .USER_WORKING_DIR .WORK_DIR }}"
    vars:
      BIN: "{{default .APPNAME .BIN }}"
    silent: true
    cmds:
      - |
        go mod tidy
        gofmt -w .
        go build \
          -o bin/{{.BIN}} \
          -ldflags "
            -s -w
            -X github.com/robertranjan/${APPNAME}/version.Version={{.VERSION}}
            -X github.com/robertranjan/${APPNAME}/version.BuildDate={{.DATETIMESTAMP}}" \
          main.go
        cp -f bin/{{.BIN}} /Users/rt/bin/kpcli

  install:
    deps:
      - build
    desc: "install go binary"
    dir: "{{ default .USER_WORKING_DIR .WORK_DIR }}"
    vars:
      BIN: "{{default .APPNAME .BIN }}"
    cmds:
      - |
        cp -f bin/{{.BIN}} /Users/rt/bin/kpcli
        cp bin/{{.APPNAME}} ~/bin/.

  run:
    desc: "run a go project"
    dir: "{{ default .USER_WORKING_DIR .WORK_DIR }}"
    vars:
      BIN_NAME:
        sh: basename {{.USER_WORKING_DIR}}
    cmds:
      - task: build
        vars: { BIN: "{{.BIN_NAME}}" }
      - "{{.USER_WORKING_DIR}}/bin/{{.BIN_NAME}} {{.CLI_ARGS}}"

  diff:
    deps:
      - build
    desc: "run diff"
    cmds:
      - |
        rm -f tmp.csv diff.log

        recentFile=$(ls -tl ${KDBX_BKUP_DIR} | awk 'NR==2 { print $9 }')
        echo "recentFile: ${recentFile}"
        bin/kpcli --keyfile ${KEYFILE} \
            --database ${KDBX_BKUP_DIR}/${recentFile} \
            --pass $(pass RobertsFamily.kdbx) \
          ls -of csv --quite > database1.out

        bin/kpcli --keyfile ${KEYFILE} \
            --database ${CURRENT_KDBX} \
            --pass $(pass RobertsFamily.kdbx) \
          ls -of csv --quite > database2.out

        head -n 2 database1.out > tmp.csv
        diffs=$(diff --suppress-common-lines -U0 database1.out database2.out) || true
        echo "${diffs}" | grep -v '\-\-\-' | tail -n +3 >> tmp.csv

        csvtable <tmp.csv > diff.log
        diffCount=$(grep -c . diff.log)
        if [[ "${diffCount}" -gt "4" ]]; then
          cat diff.log
        fi

  diff2:
    cmds:
      - |
        bin/kpcli \
          --keyfile ./tmp/master-db.key \
          --database ./tmp/master-db.kdbx.194552000 \
          --pass "${KDBX_PASSWORD}" \
          diff \
            --database2 ./tmp/master-db.kdbx

  github-release:
    desc: "release a new version on github releases"
    cmds:
      - |
        set -x
        version=$(rg 'Version string' version/version.go | sed 's/.*=//' | cut -d'_' -f 1 | tr -d '"')
        git tag --force ${version} && git push github --tags
        # git tag --force ${version} && git push github --tags --force

  # release-check:
  #   desc: "check release tag"
  #   cmds:
  #     - |
  #       printf "\n - Git tag:\n"
  #       printf "   - $(GitTagLocal): local\n"
  #       printf "   - $(GitTagRemote): remote \n\n"
  #       printf " - Version from files:\n"
  #       printf "   - $(appVersionSrc): version/version.go\n\n"
  #       ifeq ($(GitTagRemote),$(GitTagLocal))
  #         echo " - Version: $(appVersionConfig) is already on upstream. Either create new tag or overwrite and push forcefully."
  #         printf "     create new tag      : git tag $(appVersionConfig)+1 && git push origin --tags \n"
  #         printf "     overwrite forcefully: git tag --force $(appVersionConfig) && git push origin --tags --force \n"
  #       else
  #         printf " - tag: $(GitTagLocal) is not in remote, push it to remote using below cmd\n"
  #         printf "     - merge PR on GitHub UI\n       git co main && git pull\n"
  #         printf "       git tag $(appVersionConfig) && git push origin --tags \n"
  #       endif

  annotate-gotrace:
    desc: "annotate go src files with gotrace to generate dot graph"
    preconditions:
      - |
        git diff --name-status --staged --exit-code
        git diff --name-status --exit-code
    cmds:
      - |
        # annotate all functions
        echo " - adding trace commands to every functions"
        {{.GOTRACE_BIN}} --debug -w --files $(fd -e go | tr '\n' ',' | sed 's/,$//')

        # fix go imports
        echo " - fixing go-import statments on every go files"
        goimports -w $(fd -e go)

        # rebuild application
        echo " - building application '$(APPNAME)' with gotrace annotations "
      - task: build
      - |

        # run app/command to generate trace
        echo " - running 'bin/{{.APPNAME}} version' to generate traces"

        # cleanup/generate .dot graph file
        rm -rf ./tmp && mkdir -p ./tmp
        echo "digraph {" > {{.DOT_FILE}}
        bin/{{.APPNAME}} version | grep ^'"'  >> {{.DOT_FILE}}.tmp
        cat {{.DOT_FILE}}.tmp | sort -u >>  {{.DOT_FILE}}
        echo "}" >> {{.DOT_FILE}}

        # generate .image file
        cat {{.DOT_FILE}} | dot -Tpng -o {{.DOT_OUTFILE}}
        open {{.DOT_OUTFILE}}

        # summary
        echo " - You may find the temp files generated at ./tmp/"
        git st | grep '\tmodified:'> ./tmp/annotated-files.txt
    vars:
      DOT_FILE: ./tmp/flow-dia.dot
      DOT_OUTFILE: ./tmp/gotrace.png
      GOTRACE_BIN: ~/go/bin/gotrace

  ## annotated-files.txt: generate this file from git status
  annotated-files.txt:
    desc: "generate the list of annotated files"
    cmds:
      - git st | grep '\tmodified:'> ./tmp/annotated-files.txt

  ## cleanup-gotrace: cleans up all annotations mady by gotrace
  cleanup-gotrace:
    desc: "cleanup the annotations made by gotrace"
    preconditions:
      - |
        if [[ ! -f ./tmp/annotated-files.txt ]] ; then \
        printf "${yellow}no changes found to cleanup, exiting...\n${reset}" ; \
        exit 1 ; \
        fi ; \
    cmds:
      - |
        printf "below are the files annotated, restoring now...\n${yellow}"
        cat ./tmp/annotated-files.txt
        printf "${reset}"
        awk 'BEGIN {printf "git co "} {printf $2" "}' ./tmp/annotated-files.txt | bash
        rm ./tmp/annotated-files.txt

        # rebuilding app to restore original functionality without gotraces
      - task: build
